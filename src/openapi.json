{
    "openapi": "3.0.3",
    "info": {
        "title": "UoA Discords API",
        "contact": {
            "name": "API Support (Discord)",
            "url": "https://discord.gg/XmdRWSCy2U"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/LICENSE"
        },
        "version": "0.0.1"
    },
    "servers": [
        {
            "url": "http://localhost:{port}",
            "description": "Development Server",
            "variables": {
                "port": {
                    "default": "5000"
                }
            }
        },
        {
            "url": "https://registry.uoa-discords.com",
            "description": "Production Server"
        }
    ],
    "paths": {
        "/": {
            "get": {
                "tags": ["Miscellaneous"],
                "security": [{}, { "rateLimitBypassToken": [] }],
                "operationId": "getRoot",
                "responses": {
                    "200": {
                        "description": "Basic welcome message.",
                        "content": {
                            "text/html": {
                                "example": "You found the UoA Discords server registry API!<br />Having a look around? Check out the <a href=\"/api-docs\">API documentation</a>!"
                            }
                        }
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    }
                }
            },
            "post": {
                "tags": ["Miscellaneous"],
                "security": [{}, { "rateLimitBypassToken": [] }],
                "operationId": "postRoot",
                "responses": {
                    "200": {
                        "description": "Basic API information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "startTime": {
                                            "$ref": "#/components/schemas/ISOString"
                                        },
                                        "version": {
                                            "type": "string",
                                            "example": "12.34.56"
                                        },
                                        "receivedRequest": {
                                            "$ref": "#/components/schemas/ISOString"
                                        }
                                    },
                                    "required": ["startTime", "version", "receivedRequest"],
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    }
                }
            }
        },
        "/ip": {
            "get": {
                "tags": ["Miscellaneous"],
                "security": [{}, { "rateLimitBypassToken": [] }],
                "operationId": "getIp",
                "description": "Returns IP address of the requester, useful for [configuring proxies](https://www.npmjs.com/package/express-rate-limit#:~:text=Troubleshooting%20Proxy%20Issues).",
                "responses": {
                    "200": {
                        "description": "Your IP address according to the server. May be `::1` if viewing from the same network.",
                        "content": {
                            "text/html": {
                                "example": "123.123.123.123"
                            }
                        }
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    }
                }
            }
        },
        "/spec": {
            "get": {
                "tags": ["Miscellaneous"],
                "responses": {
                    "200": {
                        "description": "OpenAPI spec.",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/api-docs": {
            "get": {
                "tags": ["Miscellaneous"],
                "responses": {
                    "200": {
                        "description": "This document.",
                        "content": {
                            "text/html": {}
                        }
                    }
                }
            }
        },
        "/static": {
            "get": {
                "tags": ["Miscellaneous"],
                "responses": {
                    "200": {
                        "description": "List of static routes.",
                        "content": {
                            "text/html": {}
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "tags": ["Auth"],
                "security": [{}, { "rateLimitBypassToken": [] }],
                "operationId": "postLogin",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "code": {
                                        "type": "string"
                                    },
                                    "redirect_uri": {
                                        "type": "string",
                                        "example": "http://localhost:5000/static/discordOAuth"
                                    }
                                },
                                "required": ["code", "redirect_uri"],
                                "additionalProperties": false
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful login response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginOrSignupResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    },
                    "502": {
                        "$ref": "#/components/responses/SecondaryRequestError502"
                    }
                }
            }
        },
        "/refresh": {
            "get": {
                "tags": ["Auth"],
                "security": [{ "siteToken": [], "rateLimitBypassToken": [] }, { "siteToken": [] }],
                "operationId": "getRefresh",
                "responses": {
                    "200": {
                        "description": "Successful refresh response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginOrSignupResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthError401"
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    },
                    "502": {
                        "$ref": "#/components/responses/SecondaryRequestError502"
                    }
                }
            }
        },
        "/logout": {
            "get": {
                "tags": ["Auth"],
                "security": [{ "siteToken": [], "rateLimitBypassToken": [] }, { "siteToken": [] }],
                "operationId": "getLogout",
                "responses": {
                    "200": {
                        "description": "Successfully logged out."
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    },
                    "502": {
                        "$ref": "#/components/responses/SecondaryRequestError502"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "LoginOrSignupResponse": {
                "type": "object",
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "discordAuth": {
                        "description": "[https://discord.com/developers/docs/topics/oauth2#authorization-code-grant-access-token-response](https://discord.com/developers/docs/topics/oauth2#authorization-code-grant-access-token-response)",
                        "type": "object",
                        "properties": {
                            "access_token": {
                                "type": "string"
                            },
                            "token_type": {
                                "type": "string",
                                "description": "The type of token provided (Bearer)."
                            },
                            "expires_in": {
                                "type": "integer",
                                "description": "The number of seconds until the token expires."
                            },
                            "refresh_token": {
                                "type": "string"
                            },
                            "scope": {
                                "type": "string",
                                "description": "The scopes that were granted to the application by the user."
                            }
                        },
                        "required": ["access_token", "token_type", "expires_in", "refresh_token", "scope"],
                        "additionalProperties": false
                    },
                    "siteAuth": {
                        "type": "string",
                        "description": "Signed JsonWebToken (JWT) to use in authorization header for elevated requests to the site."
                    }
                },
                "required": ["user", "discordAuth", "siteAuth"],
                "additionalProperties": false
            },
            "SiteTokenPayload": {
                "type": "object",
                "description": "Shape of the payload that is stored in the body of a site token (a signed JWT).<br />Site tokens are provided in the `Authorization` header of any elevated requests.",
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/DiscordIDString"
                    },
                    "access_token": {
                        "type": "string",
                        "description": "The Discord OAuth2 access token of the requester.<br />This is used to make elevated requests to the Discord API on behalf of this user.<br />Since we only require the 'Identify' scope, the only requests we can make are to:<br />- Terminate the current OAuth session (revoke).<br />- Get basic user info (ID, username, profile picture, etc...)"
                    },
                    "refresh_token": {
                        "type": "string",
                        "description": "The Discord OAuth2 refresh token of the requester.<br />This can be used to extend the user's current OAuth session."
                    }
                },
                "required": ["id", "access_token", "refresh_token"],
                "additionalProperties": false
            },
            "EntryFacultyTags": {
                "type": "integer",
                "minimum": 0,
                "maximum": 4095,
                "description": "Tags for servers that describe the general faculty/faculties they pertain to.<br />Servers can have any combination of these tags, as long as they are somewhat relevant.<br />These values (mostly) come from [here](https://www.auckland.ac.nz/en/study/our-faculties.html)."
            },
            "ServerChangeRecord": {
                "type": "object",
                "properties": {
                    "verb": {
                        "$ref": "#/components/schemas/ServerStatusAction"
                    },
                    "by": {
                        "$ref": "#/components/schemas/DiscordIDString"
                    },
                    "at": {
                        "$ref": "#/components/schemas/ISOString"
                    },
                    "reason": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": ["verb", "by", "at", "reason"],
                "additionalProperties": false
            },
            "ServerStatus": {
                "type": "integer",
                "minimum": 0,
                "maximum": 4
            },
            "ServerStatusAction": {
                "type": "integer",
                "minimum": 0,
                "maximum": 7
            },
            "User": {
                "type": "object",
                "properties": {
                    "_id": {
                        "$ref": "#/components/schemas/DiscordIDString"
                    },
                    "discord": {
                        "type": "object",
                        "properties": {
                            "username": {
                                "type": "string"
                            },
                            "discriminator": {
                                "type": "string"
                            },
                            "avatar": {
                                "type": "string",
                                "nullable": true
                            }
                        },
                        "required": ["username", "discriminator", "avatar"],
                        "additionalProperties": false
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/UserPermissions"
                    },
                    "metaData": {
                        "type": "object",
                        "properties": {
                            "latestIp": {
                                "type": "string",
                                "nullable": true
                            },
                            "registered": {
                                "$ref": "#/components/schemas/ISOString"
                            },
                            "lastLoginOrRefresh": {
                                "$ref": "#/components/schemas/ISOString"
                            }
                        },
                        "required": ["latestIp", "registered", "lastLoginOrRefresh"],
                        "additionalProperties": false
                    },
                    "favouriteServer": {
                        "type": "string",
                        "nullable": true,
                        "description": "Nullable Discord ID string."
                    },
                    "submissions": {
                        "type": "object"
                    },
                    "actions": {
                        "type": "object"
                    },
                    "permissionsLog": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserChangeRecord"
                        }
                    }
                },
                "required": [
                    "_id",
                    "discord",
                    "permissions",
                    "metaData",
                    "favouriteServer",
                    "submissions",
                    "actions",
                    "permissionsLog"
                ],
                "additionalProperties": false
            },
            "UserChangeRecord": {
                "type": "object",
                "properties": {
                    "oldUserPermissions": {
                        "$ref": "#/components/schemas/UserPermissions"
                    },
                    "by": {
                        "$ref": "#/components/schemas/DiscordIDString"
                    },
                    "at": {
                        "$ref": "#/components/schemas/ISOString"
                    },
                    "reason": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": ["oldUserPermissions", "by", "at", "reason"],
                "additionalProperties": false
            },
            "UserPermissions": {
                "type": "integer",
                "minimum": 0,
                "maximum": 127,
                "description": "User permissions bitfield."
            },
            "ISOString": {
                "type": "string",
                "description": "A string in ISO format, used to store dates.",
                "example": "2022-11-08T02:20:08.190Z"
            },
            "DiscordIDString": {
                "type": "string",
                "description": "A Discord ID.",
                "example": "909645967081476147"
            }
        },
        "responses": {
            "AuthError401": {
                "description": "Authentication failed.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Invalid Token Payload Type"
                                },
                                "hint": {
                                    "type": "string",
                                    "example": "Missing refresh_token (expected string, got undefined)."
                                }
                            },
                            "required": ["message", "hint"],
                            "additionalProperties": false
                        }
                    }
                }
            },
            "ForbiddenError403": {
                "description": "User lacks permission(s) to carry out this action.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "requiredPermissions": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": ["Favourite", "ManageServers", "Feature"]
                                },
                                "currentPermissions": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": ["Favourite", "ManageServers", "Feature"]
                                },
                                "missingPermissions": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": ["Favourite", "ManageServers", "Feature"]
                                }
                            },
                            "required": ["requiredPermissions", "currentPermissions", "missingPermissions"],
                            "additionalProperties": false
                        }
                    }
                }
            },
            "RateLimited429": {
                "description": "Too many requests, rate limited.",
                "headers": {
                    "RateLimit-Limit": {
                        "required": true,
                        "description": "Maximum number of requests per time window.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "RateLimit-Remaining": {
                        "required": true,
                        "description": "Number of requests remaining in this time window.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "RateLimit-Reset": {
                        "required": true,
                        "description": "Number of seconds until this time window ends.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "Retry-After": {
                        "required": true,
                        "description": "Length of time window in seconds.",
                        "schema": {
                            "type": "number"
                        }
                    }
                }
            },
            "NotImplemented501": {
                "description": "This endpoint requires a database, which has not been configured nor provided to the handler."
            },
            "SecondaryRequestError502": {
                "description": "A call to another API made by the server failed.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Failed to refresh access token"
                                },
                                "hint": {
                                    "type": "string",
                                    "example": "Supplied refresh token is invalid."
                                },
                                "receivedStatusCode": {
                                    "anyOf": [
                                        { "type": "integer", "description": "Received HTTP status code." },
                                        { "type": "string", "default": "Unknown" }
                                    ]
                                }
                            },
                            "required": ["message", "hint", "receivedStatusCode"],
                            "additionalProperties": false
                        }
                    }
                }
            }
        },
        "parameters": {},
        "securitySchemes": {
            "siteToken": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "JWT signed by server, contains Discord access token, refresh token and user ID."
            },
            "rateLimitBypassToken": {
                "type": "apiKey",
                "description": "Token for bypassing rate limits.",
                "name": "RateLimit-Bypass-Token",
                "in": "header"
            }
        }
    },
    "tags": [
        {
            "name": "Miscellaneous",
            "description": "Miscellaneous functionality."
        },
        {
            "name": "User Management",
            "description": "Managing and fetching users."
        },
        {
            "name": "Server Management",
            "description": "Managing servers."
        },
        {
            "name": "Auth",
            "description": "Logging in, logging out, and refreshing."
        },
        {
            "name": "Server Listing",
            "description": "Fetching and searching servers."
        },
        {
            "name": "User Listing",
            "description": "Fetching and searching users."
        }
    ]
}
