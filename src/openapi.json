{
    "openapi": "3.0.3",
    "info": {
        "title": "UoA Discords API",
        "contact": {
            "name": "API Support (Discord)",
            "url": "https://discord.gg/XmdRWSCy2U"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/LICENSE"
        },
        "version": "0.0.1"
    },
    "servers": [
        {
            "url": "http://localhost:{port}",
            "description": "Development Server",
            "variables": {
                "port": {
                    "default": "5000"
                }
            }
        },
        {
            "url": "https://registry.uoa-discords.com",
            "description": "Production Server"
        }
    ],
    "paths": {
        "/": {
            "get": {
                "tags": ["Miscellaneous"],
                "security": [{}, { "rateLimitBypassToken": [] }],
                "operationId": "getRoot",
                "responses": {
                    "200": {
                        "description": "Basic welcome message.",
                        "content": {
                            "text/html": {
                                "example": "You found the UoA Discords server registry API!<br />Having a look around? Check out the <a href=\"/api-docs\">API documentation</a>!"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError400"
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    }
                }
            },
            "post": {
                "tags": ["Miscellaneous"],
                "security": [{}, { "rateLimitBypassToken": [] }],
                "operationId": "postRoot",
                "responses": {
                    "200": {
                        "description": "Basic API information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "startTime": {
                                            "$ref": "#/components/schemas/ISOString"
                                        },
                                        "version": {
                                            "type": "string",
                                            "example": "12.34.56"
                                        },
                                        "receivedRequest": {
                                            "$ref": "#/components/schemas/ISOString"
                                        }
                                    },
                                    "required": ["startTime", "version", "receivedRequest"],
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError400"
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    }
                }
            }
        },
        "/ip": {
            "get": {
                "tags": ["Miscellaneous"],
                "security": [{}, { "rateLimitBypassToken": [] }],
                "operationId": "getIp",
                "description": "Returns IP address of the requester, useful for [configuring proxies](https://www.npmjs.com/package/express-rate-limit#:~:text=Troubleshooting%20Proxy%20Issues).",
                "responses": {
                    "200": {
                        "description": "Your IP address according to the server. May be `::1` if viewing from the same network.",
                        "content": {
                            "text/html": {
                                "example": "123.123.123.123"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError400"
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    }
                }
            }
        },
        "/spec": {
            "get": {
                "tags": ["Miscellaneous"],
                "responses": {
                    "200": {
                        "description": "OpenAPI spec.",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/api-docs": {
            "get": {
                "tags": ["Miscellaneous"],
                "responses": {
                    "200": {
                        "description": "This document.",
                        "content": {
                            "text/html": {}
                        }
                    }
                }
            }
        },
        "/static": {
            "get": {
                "tags": ["Miscellaneous"],
                "responses": {
                    "200": {
                        "description": "List of static routes.",
                        "content": {
                            "text/html": {}
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "tags": ["Auth"],
                "security": [{}, { "rateLimitBypassToken": [] }],
                "operationId": "postLogin",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "code": {
                                        "type": "string"
                                    },
                                    "redirect_uri": {
                                        "type": "string",
                                        "example": "http://localhost:5000/static/discordOAuth"
                                    }
                                },
                                "required": ["code", "redirect_uri"],
                                "additionalProperties": false
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful login response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginOrSignupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError400"
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    },
                    "502": {
                        "$ref": "#/components/responses/SecondaryRequestError502"
                    }
                }
            }
        },
        "/refresh": {
            "get": {
                "tags": ["Auth"],
                "security": [{ "siteToken": [], "rateLimitBypassToken": [] }, { "siteToken": [] }],
                "operationId": "getRefresh",
                "responses": {
                    "200": {
                        "description": "Successful refresh response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginOrSignupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError400"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthError401"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError404"
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    },
                    "502": {
                        "$ref": "#/components/responses/SecondaryRequestError502"
                    }
                }
            }
        },
        "/logout": {
            "get": {
                "tags": ["Auth"],
                "security": [{ "siteToken": [], "rateLimitBypassToken": [] }, { "siteToken": [] }],
                "operationId": "getLogout",
                "responses": {
                    "200": {
                        "description": "Successfully logged out."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError400"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthError401"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFoundError404"
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimited429"
                    },
                    "502": {
                        "$ref": "#/components/responses/SecondaryRequestError502"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "LoginOrSignupResponse": {
                "type": "object",
                "externalDocs": {
                    "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/types/Auth/LoginOrSignupResponse.ts",
                    "description": "src/types/Auth/LoginOrSignupResponse.ts"
                },
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "discordAuth": {
                        "type": "object",
                        "externalDocs": {
                            "url": "https://discord.com/developers/docs/topics/oauth2#authorization-code-grant-access-token-response",
                            "description": "Discord OAuth2 Docs"
                        },
                        "properties": {
                            "access_token": {
                                "type": "string"
                            },
                            "token_type": {
                                "type": "string",
                                "description": "The type of token provided (Bearer)."
                            },
                            "expires_in": {
                                "type": "integer",
                                "description": "The number of seconds until the token expires."
                            },
                            "refresh_token": {
                                "type": "string"
                            },
                            "scope": {
                                "type": "string",
                                "description": "The scopes that were granted to the application by the user."
                            }
                        },
                        "required": ["access_token", "token_type", "expires_in", "refresh_token", "scope"],
                        "additionalProperties": false
                    },
                    "siteAuth": {
                        "type": "string"
                    }
                },
                "required": ["user", "discordAuth", "siteAuth"],
                "additionalProperties": false
            },
            "SiteTokenPayload": {
                "type": "object",
                "externalDocs": {
                    "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/types/Auth/SiteTokenPayload.ts",
                    "description": "src/types/Auth/SiteTokenPayload.ts"
                },
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/DiscordIDString"
                    },
                    "access_token": {
                        "type": "string"
                    },
                    "refresh_token": {
                        "type": "string"
                    }
                },
                "required": ["id", "access_token", "refresh_token"],
                "additionalProperties": false
            },
            "PaginationParams": {
                "type": "object",
                "externalDocs": {
                    "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/types/Page/index.ts",
                    "description": "src/types/Page/index.ts"
                },
                "properties": {
                    "page": {
                        "type": "integer",
                        "minimum": 0,
                        "example": 0
                    },
                    "perPage": {
                        "type": "integer",
                        "description": "Maximum number of results to show per page.",
                        "minimum": 1,
                        "maximum": 100,
                        "example": 20
                    }
                },
                "required": ["page", "perPage"]
            },
            "WithPagination": {
                "type": "object",
                "externalDocs": {
                    "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/types/Page/index.ts",
                    "description": "src/types/Page/index.ts"
                },
                "properties": {
                    "totalItemCount": {
                        "type": "integer",
                        "minimum": 0
                    },
                    "items": {
                        "type": "array"
                    }
                },
                "required": ["totalItemCount", "items"]
            },
            "Server": {
                "type": "object",
                "externalDocs": {
                    "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/types/Server/Server.ts",
                    "description": "src/types/Server/Server.ts"
                },
                "properties": {
                    "_id": {
                        "$ref": "#/components/schemas/DiscordIDString"
                    },
                    "status": {
                        "$ref": "#/components/schemas/ServerStatus"
                    },
                    "inviteCode": {
                        "type": "string"
                    },
                    "inviteCreatedBy": {
                        "type": "object",
                        "externalDocs": {
                            "url": "https://discord.com/developers/docs/resources/user#user-object",
                            "description": "Discord User Object"
                        },
                        "properties": {
                            "id": {
                                "$ref": "#/components/schemas/DiscordIDString"
                            },
                            "username": {
                                "type": "string"
                            },
                            "discriminator": {
                                "type": "string"
                            },
                            "avatar": {
                                "type": "string",
                                "nullable": true
                            }
                        },
                        "required": ["id", "username", "discriminator", "avatar"],
                        "additionalProperties": false
                    },
                    "guildData": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "icon": {
                                "type": "string",
                                "nullable": true
                            },
                            "splash": {
                                "type": "string",
                                "nullable": true
                            },
                            "banner": {
                                "type": "string",
                                "nullable": true
                            },
                            "description": {
                                "type": "string",
                                "nullable": true
                            },
                            "verificationLevel": {
                                "type": "integer",
                                "externalDocs": {
                                    "url": "https://discord.com/developers/docs/resources/guild#guild-object-verification-level",
                                    "description": "Discord Guild Verification Level"
                                },
                                "minimum": 0,
                                "maximum": 4
                            }
                        },
                        "required": ["name", "icon", "splash", "banner", "description", "verificationLevel"],
                        "additionalProperties": false
                    },
                    "created": {
                        "type": "object",
                        "properties": {
                            "by": {
                                "$ref": "#/components/schemas/DiscordIDString"
                            },
                            "at": {
                                "$ref": "#/components/schemas/ISOString"
                            }
                        },
                        "required": ["by", "at"],
                        "additionalProperties": false
                    },
                    "serverTags": {
                        "$ref": "#/components/schemas/ServerTags"
                    },
                    "statusLog": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServerChangeRecord"
                        }
                    },
                    "size": {
                        "type": "object",
                        "properties": {
                            "online": {
                                "type": "integer"
                            },
                            "total": {
                                "type": "integer"
                            },
                            "lastUpdated": {
                                "$ref": "#/components/schemas/ISOString"
                            }
                        },
                        "required": ["online", "total", "lastUpdated"],
                        "additionalProperties": false
                    },
                    "numFavourited": {
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "_id",
                    "status",
                    "inviteCode",
                    "inviteCreatedBy",
                    "guildData",
                    "created",
                    "serverTags",
                    "statusLog",
                    "size"
                ],
                "additionalProperties": false
            },
            "ServerChangeRecord": {
                "type": "object",
                "externalDocs": {
                    "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/types/Server/ServerChangeRecord.ts",
                    "description": "src/types/Server/ServerChangeRecord.ts"
                },
                "properties": {
                    "verb": {
                        "$ref": "#/components/schemas/ServerStatusAction"
                    },
                    "by": {
                        "$ref": "#/components/schemas/DiscordIDString"
                    },
                    "at": {
                        "$ref": "#/components/schemas/ISOString"
                    },
                    "reason": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": ["verb", "by", "at", "reason"],
                "additionalProperties": false
            },
            "ServerSortOptions": {
                "type": "integer",
                "externalDocs": {
                    "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/types/Server/ServerSortOptions.ts",
                    "description": "src/types/Server/ServerSortOptions.ts"
                },
                "minimum": 0,
                "maximum": 3
            },
            "ServerStatus": {
                "type": "integer",
                "externalDocs": {
                    "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/types/Server/ServerStatus.ts",
                    "description": "src/types/Server/ServerStatus.ts"
                },
                "minimum": 0,
                "maximum": 4
            },
            "ServerStatusAction": {
                "type": "integer",
                "externalDocs": {
                    "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/types/Server/ServerStatusAction.ts",
                    "description": "src/types/Server/ServerStatusAction.ts"
                },
                "minimum": 0,
                "maximum": 7
            },
            "ServerTags": {
                "type": "integer",
                "externalDocs": {
                    "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/types/Server/ServerTags.ts",
                    "description": "src/types/Server/ServerTags.ts"
                },
                "minimum": 0,
                "maximum": 8191
            },
            "ServerTagSearchOptions": {
                "type": "object",
                "externalDocs": {
                    "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/types/Server/ServerTagSearchOptions.ts",
                    "description": "src/types/Server/ServerTagSearchOptions.ts"
                },
                "properties": {
                    "tags": {
                        "$ref": "#/components/schemas/ServerTags"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["or", "and"]
                    }
                },
                "required": ["tags", "type"],
                "additionalProperties": false
            },
            "User": {
                "type": "object",
                "externalDocs": {
                    "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/types/User/User.ts",
                    "description": "src/types/User/User.ts"
                },
                "properties": {
                    "_id": {
                        "$ref": "#/components/schemas/DiscordIDString"
                    },
                    "discord": {
                        "type": "object",
                        "properties": {
                            "username": {
                                "type": "string"
                            },
                            "discriminator": {
                                "type": "string"
                            },
                            "avatar": {
                                "type": "string",
                                "nullable": true
                            }
                        },
                        "required": ["username", "discriminator", "avatar"],
                        "additionalProperties": false
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/UserPermissions"
                    },
                    "metaData": {
                        "type": "object",
                        "properties": {
                            "latestIp": {
                                "type": "string",
                                "nullable": true
                            },
                            "registered": {
                                "$ref": "#/components/schemas/ISOString"
                            },
                            "lastLoginOrRefresh": {
                                "$ref": "#/components/schemas/ISOString"
                            }
                        },
                        "required": ["latestIp", "registered", "lastLoginOrRefresh"],
                        "additionalProperties": false
                    },
                    "favouriteServer": {
                        "type": "string",
                        "nullable": true
                    },
                    "submissions": {
                        "type": "object"
                    },
                    "actions": {
                        "type": "object"
                    },
                    "permissionsLog": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserChangeRecord"
                        }
                    }
                },
                "required": [
                    "_id",
                    "discord",
                    "permissions",
                    "metaData",
                    "favouriteServer",
                    "submissions",
                    "actions",
                    "permissionsLog"
                ],
                "additionalProperties": false
            },
            "UserChangeRecord": {
                "type": "object",
                "properties": {
                    "oldUserPermissions": {
                        "$ref": "#/components/schemas/UserPermissions"
                    },
                    "by": {
                        "$ref": "#/components/schemas/DiscordIDString"
                    },
                    "at": {
                        "$ref": "#/components/schemas/ISOString"
                    },
                    "reason": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": ["oldUserPermissions", "by", "at", "reason"],
                "additionalProperties": false
            },
            "UserPermissions": {
                "type": "integer",
                "externalDocs": {
                    "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/types/User/UserPermissions.ts",
                    "description": "src/types/User/UserPermissions.ts"
                },
                "minimum": 0,
                "maximum": 127
            },
            "UserSortOptions": {
                "type": "integer",
                "externalDocs": {
                    "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/types/User/UserSortOptions.ts",
                    "description": "src/types/User/UserSortOptions.ts"
                },
                "minimum": 0,
                "maximum": 2
            },
            "ISOString": {
                "type": "string",
                "externalDocs": {
                    "url": "https://en.wikipedia.org/wiki/ISO_8601",
                    "description": "Wikipedia Page"
                },
                "description": "A string in ISO format, used to store dates.",
                "example": "2022-11-08T02:20:08.190Z"
            },
            "DiscordIDString": {
                "type": "string",
                "externalDocs": {
                    "url": "https://discord.com/developers/docs/reference#snowflakes",
                    "description": "Discord Snowflake Docs"
                },
                "description": "A Discord ID.",
                "example": "909645967081476147"
            },
            "SiteErrorObject": {
                "type": "object",
                "externalDocs": {
                    "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/errors/SiteError.ts",
                    "description": "src/errors/SiteError.ts"
                },
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "required": ["title", "description"]
            }
        },
        "responses": {
            "BadRequestError400": {
                "description": "Error thrown when a request is malformed or otherwise an invalid shape. This can also be thrown when a request's origin header is present and not in the allowed origins whitelist (CORS error).",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "externalDocs": {
                                "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/middleware/validatorErrorHandler.ts",
                                "description": "src/middleware/validatorErrorHandler.ts"
                            },
                            "allOf": [{ "$ref": "#/components/schemas/SiteErrorObject" }],
                            "properties": {
                                "additionalData": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "path": {
                                                "type": "string",
                                                "example": "/refresh"
                                            },
                                            "message": {
                                                "type": "string",
                                                "example": "Authorization header with scheme 'Bearer' required"
                                            },
                                            "error_code": {
                                                "type": "string"
                                            }
                                        },
                                        "required": ["path", "message"],
                                        "additionalProperties": false
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "AuthError401": {
                "description": "Error thrown when a user's site token (JWT) is missing or invalid.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "externalDocs": {
                                "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/errors/AuthError.ts",
                                "description": "src/errors/AuthError.ts"
                            },
                            "allOf": [{ "$ref": "#/components/schemas/SiteErrorObject" }]
                        }
                    }
                }
            },
            "ForbiddenError403": {
                "description": "Error thrown when a user does not have the required permissions to do an attempted action, or the action is impossible (e.g. a user removing the owner permission from themselves) regardless of permissions.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "externalDocs": {
                                "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/errors/ForbiddenError.ts",
                                "description": "src/errors/ForbiddenError.ts"
                            },
                            "allOf": [{ "$ref": "#/components/schemas/SiteErrorObject" }],
                            "properties": {
                                "additionalData": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "Names of the missing permissions."
                                }
                            },
                            "required": ["additionalData"]
                        }
                    }
                }
            },
            "NotFoundError404": {
                "description": "Error thrown when a server or user does not exist in the database.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "externalDocs": {
                                "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/errors/NotFoundError.ts",
                                "description": "src/errors/NotFoundError.ts"
                            },
                            "allOf": [{ "$ref": "#/components/schemas/SiteErrorObject" }]
                        }
                    }
                }
            },
            "RateLimited429": {
                "description": "Too many requests, rate limited.",
                "headers": {
                    "RateLimit-Limit": {
                        "required": true,
                        "description": "Maximum number of requests per time window.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "RateLimit-Remaining": {
                        "required": true,
                        "description": "Number of requests remaining in this time window.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "RateLimit-Reset": {
                        "required": true,
                        "description": "Number of seconds until this time window ends.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "Retry-After": {
                        "required": true,
                        "description": "Length of time window in seconds.",
                        "schema": {
                            "type": "number"
                        }
                    }
                }
            },
            "SecondaryRequestError502": {
                "description": "Error thrown when an API call made by the server to another server fails.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "externalDocs": {
                                "url": "https://github.com/UoA-Discords/server-registry-api/blob/main/src/errors/SecondaryRequestError.ts",
                                "description": "src/errors/SecondaryRequestError.ts"
                            },
                            "allOf": [{ "$ref": "#/components/schemas/SiteErrorObject" }],
                            "properties": {
                                "additionalData": {
                                    "type": "integer",
                                    "nullable": true
                                }
                            },
                            "required": ["additionalData"]
                        }
                    }
                }
            }
        },
        "parameters": {
            "DiscordID": {
                "in": "path",
                "name": "id",
                "schema": {
                    "$ref": "#/components/schemas/DiscordIDString"
                },
                "required": true
            }
        },
        "securitySchemes": {
            "siteToken": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "JWT signed by server, contains Discord access token, refresh token and user ID."
            },
            "rateLimitBypassToken": {
                "type": "apiKey",
                "description": "Token for bypassing rate limits.",
                "name": "RateLimit-Bypass-Token",
                "in": "header"
            }
        }
    },
    "tags": [
        {
            "name": "Miscellaneous",
            "description": "Miscellaneous functionality."
        },
        {
            "name": "Auth",
            "description": "Logging in, logging out, and refreshing."
        },
        {
            "name": "User Management",
            "description": "Managing and fetching users. These endpoints require the `ManageUsers` permission."
        },
        {
            "name": "Server Management",
            "description": "Managing servers. These endpoints require the `ManageServers` permission."
        },
        {
            "name": "Registry",
            "description": "Listing, searching, and submitting servers to the registry, and fetching users."
        }
    ]
}
